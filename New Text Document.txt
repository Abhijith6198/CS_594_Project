""" from flask import Flask, render_template, request, redirect, url_for
# Assuming you have a DoubleRatchet class implemented in the crypto folder
import os
from flask import Flask, request, jsonify
from crypto.double_ratchet import DoubleRatchet
from cryptography.hazmat.primitives.asymmetric import x25519
from cryptography.hazmat.primitives import serialization
import os
import sys
print(sys.path)
from flask import Flask, render_template, request, redirect, url_for, jsonify
from flask_sqlalchemy import SQLAlchemy
import os

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///mySecureApp.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    public_key = db.Column(db.String(500), unique=True, nullable=False)

    def __repr__(self):
        return '<User %r>' % self.username

db.create_all()


app = Flask(__name__)

# Dummy in-memory storage for demonstration purposes
users = {}
sessions = {}

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/register', methods=['POST'])
def register():
    user_id = request.form['user_id']
    if user_id in users:
        return jsonify({'error': 'User already exists'}), 409
    # Simulate key generation and storage (details depend on your actual crypto implementation)
    users[user_id] = DoubleRatchet()  # Assuming a simple initialization for demonstration
    return jsonify({'message': 'User registered successfully', 'user_id': user_id}), 201

@app.route('/send_message', methods=['POST'])
def send_message():
    session_id = request.form['session_id']
    message = request.form['message']
    if session_id not in sessions:
        return jsonify({'error': 'Session not found'}), 404
    encrypted_message = sessions[session_id].encrypt(message)
    # Store or send the encrypted message as required
    return jsonify({'message': 'Message sent', 'encrypted': encrypted_message}), 200

@app.route('/receive_message', methods=['POST'])
def receive_message():
    session_id = request.form['session_id']
    encrypted_message = request.form['encrypted_message']
    if session_id not in sessions:
        return jsonify({'error': 'Session not found'}), 404
    decrypted_message = sessions[session_id].decrypt(encrypted_message)
    return jsonify({'message': 'Message received', 'decrypted': decrypted_message}), 200 





if __name__ == '__main__':
    app.run(debug=True) """